

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


df = pd.read_csv("uber.csv")


df.head()

df.describe()

df.shape()

df.info()

df.columns()

df = df.drop(["col_name"],axis=1)

df.isnull().sum()


df['dropoff_latitude'].fillna[value_df['dropoff_latitude'].mean(),inplace = True)

df.pickup_dT = pd.to_datetime(df.pickupDt,errors ='corce',utc =true)

df = df.assign(
 hour = df.pickupDT.dt.hour,
 day= df.pickupdt.dt.day,
month = df.pickupdt.dt.month,year,dayorweek)


df.plot(kind = "box",subplots = true,layout =(7,2),figsize(15,20))


def remove outlier(df1,col):
	Q1= df[col].qantile(0.25)
	Q2 = 0.50
	Q3 = 0.75
	Iqr = q3-q1
	lower_whisker = q1-1.5*iqr
	upper_whisker = q3+1.5*iqr
	df1[col] = np.clip(df1[col],lower_whisker,upper_whisker)
	return df1
ded treat_outlier(df1,col_list):
	for c in col_list:
		df1 = remove_outlier(df1,c)
	return df1


df = treate_outlier(df,df.columns)


df.plot(kind=box,subplot=true,layout=(7,2),figsize=(15,20))



!pip install haversine 

import haversine as hs

Travel_dist[]
for pos in range(len(df['pickup_longiture'])):
	long1,lati1,long2,lati2 = [df['pickup_longitude'][pos], df['pickuplati'][pos], ......]

loc1 = (lati1,long1)
loc2 = (lati2,long2)

c = hs.haversine(loc1,loc2)
travel_dist.append(c)
print(travel_dist)

df['dist_travel_km'] = travel-dist


corr = df.corr()

now target = fare_amount and remaining is feature


x=df[df.columns[1:]]
y = df['fare_amount']


from sklearn.model_selection import train_test_split as tts
from sklearn.linear_model import LinearRegression
red = LinearRegression()
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.ensemble import RandomForestRegressor as ran

X_train,X_test,Y_train,Y_test = tts(x,y,test_size = 0.70,random_state =7)


reg.fit(X_train,Y_train)
reg.intercept_
reg,coef_


y_pred = reg.predict(X_test)
compare = pd.Dataframe({'actual': y_test, "predicted': y_pred})
sns.heatmap(compare.corr())


r2_score(y_test,y_pred)
mse = mean_squared_error(y_test,y_pred)
rmse = np.sqrt(mse)


rf = ran(n_estimators = 100)

rf.fit(X_train,Y_train)

y_predi = rf.predict(X_test)

rs_ran = r2_score(y_test,y_predi)

rs_mse = mean_squared_root(ytest,ypredi)


